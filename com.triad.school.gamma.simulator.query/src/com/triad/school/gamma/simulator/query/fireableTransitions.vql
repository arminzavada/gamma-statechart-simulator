package com.triad.school.gamma.simulator.query

import "http://www.mit.bme.hu/gamma/statechart/Model/Statechart"
import "http://www.mit.bme.hu/gamma/statechart/Model/Interface"
import "http://www.triad.com/school/gamma/simulator/model"

pattern activeState(state: StateNode) {
	ActiveStateContainer(container);
	ActiveStateContainer.activeState(container, state);
}

pattern ports(port: Port) {
	StatechartDefinition.ports(_sc, port);
	Port.interfaceRealization(port, interfaceRealization);
	InterfaceRealization.realizationMode(interfaceRealization, ::REQUIRED);
}

pattern initialNode(state: InitialState) {
	InitialState(state);
}

pattern fireableNonTriggerTransition(source: StateNode, transition: Transition, target: StateNode) {
	Transition.sourceState(transition, source);
	Transition.targetState(transition, target);
	
	find activeState(source);
	
	neg Transition.trigger(transition, _trigger);
}

pattern fireableTriggerTransition(source: StateNode, transition: Transition, target: StateNode, event: Event) {
	find activeState(source);
	EventQueue.events(_eventQueue, event);
	
	find transitionBetween(source, transition, target);
	find transitionTriggerEvent(transition, event);
}

pattern swallowableEvents(event: Event) {	
	find activeState(source);
	EventQueue.events(_eventQueue, event);
	
	0 == count find fireableTriggerTransition(source, _, _target, event);
}

pattern transitionBetween(source: StateNode, transition: Transition, target: StateNode) {
	Transition.sourceState(transition, source);
	Transition.targetState(transition, target);
}

pattern transitionTriggerEvent(transition: Transition, event: Event) {
	Transition.trigger(transition, trigger);
	EventTrigger.eventReference(trigger, eventReference);
	PortEventReference.event(eventReference, event);
}