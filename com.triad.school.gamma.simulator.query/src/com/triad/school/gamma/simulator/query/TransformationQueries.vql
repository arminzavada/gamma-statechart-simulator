package com.triad.school.gamma.simulator.query

import "http://www.mit.bme.hu/gamma/statechart/Model/Statechart"
import "http://www.mit.bme.hu/gamma/expression/Model"
import "http://www.mit.bme.hu/gamma/statechart/Model/Interface"
import "http://www.triad.com/school/gamma/simulator/model"

pattern rootRegion(region: Region) {
	StatechartDefinition.regions(_, region);	
}

pattern subRegion(parentRegion: Region, region: Region) {
	Region.stateNodes(parentRegion, node);
	CompositeElement.regions(node, region);
}

pattern associatedRegionalActiveState(regionalActiveState: RegionalActiveState, state: StateNode) {
	RegionalActiveState.region(regionalActiveState, region);
	Region.stateNodes(region, state);
}

pattern activeState(state: StateNode) {
	RegionalActiveState.state(_, state);
}

pattern regionalState(regionalActiveState: RegionalActiveState, region: Region) {
	RegionalActiveState.region(regionalActiveState, region);
}

pattern statechartInputPort(port: Port) {
	StatechartDefinition.ports(_, port);
	Port.interfaceRealization(port, interfaceRealization);
	InterfaceRealization.realizationMode(interfaceRealization, ::REQUIRED);
}

pattern variables(variable: VariableDeclaration) {
	StatechartDefinition.variableDeclarations(_, variable);
}

pattern allStates(node: StateNode) {
	Region.stateNodes(_, node);
}

pattern entryState(region: Region, state: InitialState) {
	Region.stateNodes(region, state);
}

pattern compositeState(parent: State, child: StateNode) {
	State.regions(parent, region);
	Region.stateNodes(region, child);
}

pattern descendantState(parent: State, descendant: StateNode) {
	find compositeState+(parent, descendant);
}

pattern fireableEmptyTransition(region: Region, transition: Transition) {
	Transition.sourceState(transition, source);
	Region.stateNodes(region, source);
	
	find activeState(source);
	
	neg Transition.trigger(transition, _);
}

pattern fireableTriggerTransition(region: Region, transition: Transition, event: Event) {
	Transition.sourceState(transition, source);
	Region.stateNodes(region, source);
	
	find activeState(source);
	
	Transition.trigger(transition, trigger);
	EventTrigger.eventReference(trigger, eventReference);
	PortEventReference.event(eventReference, event);
}