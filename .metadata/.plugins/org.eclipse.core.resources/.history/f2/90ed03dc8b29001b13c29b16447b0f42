package com.triad.school.gamma.simulator.query

import com.triad.school.gamma.simulator.active_state.Active_statePackage
import hu.bme.mit.gamma.statechart.statechart.StatechartModelPackage
import org.apache.log4j.Logger
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.viatra.query.runtime.api.ViatraQueryEngine
import org.eclipse.viatra.query.runtime.emf.EMFScope
import org.eclipse.viatra.transformation.runtime.emf.modelmanipulation.IModelManipulations
import org.eclipse.viatra.transformation.runtime.emf.modelmanipulation.SimpleModelManipulations
import org.eclipse.viatra.transformation.runtime.emf.rules.batch.BatchTransformationRuleFactory
import org.eclipse.viatra.transformation.runtime.emf.transformation.batch.BatchTransformation
import org.eclipse.viatra.transformation.runtime.emf.transformation.batch.BatchTransformationStatements
import com.triad.school.gamma.simulator.active_state.Active_stateFactory
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl
import org.eclipse.emf.common.util.URI

class GammaStatechartSimulatorTransformation {
	val FireableTransitions queries = FireableTransitions.instance	
	
    extension Logger logger = Logger.getLogger(GammaStatechartSimulatorTransformation)

    /* Transformation-related extensions */
    extension BatchTransformation transformation
    extension BatchTransformationStatements statements
    
    /* Transformation rule-related extensions */
    extension BatchTransformationRuleFactory = new BatchTransformationRuleFactory
    extension IModelManipulations manipulation
    
	val extension StatechartModelPackage statePackage = StatechartModelPackage.eINSTANCE
	val extension Active_statePackage activePackage = Active_statePackage.eINSTANCE

    protected ViatraQueryEngine engine

    new(Resource resource) {
    	val factory = Active_stateFactory.eINSTANCE
    	val container = factory.createActiveStateContainer
    	
		val resourceSet = new ResourceSetImpl
		resourceSet.resources.add(resource)
		
		val active_stateResource = resourceSet.createResource(URI.createURI(""))
		active_stateResource.contents.add(container)
		
        val scope = new EMFScope(resourceSet)
        engine = ViatraQueryEngine.on(scope);
        queries.prepare(engine)
        
        manipulation = new SimpleModelManipulations(engine)
        transformation = BatchTransformation.forEngine(engine).build
        statements = transformation.transformationStatements
    }

    public def execute() {
        debug('''Executing transformation on:�resource.URI�''')        
    }
    
    public def requiredInterfaces() {
    	return Ports.Matcher.on(engine).allMatches.map[
    		it.interface
    	].toList
    }

	val requiredInterfacesRule = createRule(RequiredInterfaces.instance).action[
    	println('''Required interface: "«it.interface»"''')
    ].build
    
	val initialNodeRule = createRule(InitialNode.instance).action[
    	println('''Initial node: "«it.state»"''')
    ].build
    
    

    def dispose() {
        if (transformation != null) {
            transformation.dispose
        }
        
        transformation = null
    }
}
